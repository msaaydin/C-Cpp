#include <stdio.h>
#include <iostream>
#include <opencv2/opencv.hpp>
#include "opencv2/core/opengl.hpp"
#include "opencv2/highgui.hpp"
#include "kernel.cuh"
#include "utils.h"
#include "tiffio.h"
#include <opencv2/core/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <filesystem>
#define dimension 512
using namespace cv;
using namespace std;

int main() {
	printf("test..\n\n\n\n");
	// =======call cuda files =============== 
	callHello();
	cudaDeviceSynchronize();
	checkCudaErrors(cudaGetLastError());
	int a[1] = { 10 };
	increment_by_one(a);
	cudaDeviceSynchronize();
	checkCudaErrors(cudaGetLastError());
	// ======================================
	cout << "array value after gpu function call = " << a[0] << endl;
	// Read the image file
	/*Mat image = imread("C:/Users/msa/Desktop/kr.png");

	// Check for failure
	if (image.empty())
	{
		cout << "Could not open or find the image" << endl;
		cin.get(); //wait for any key press
		return -1;
	}

	String windowName = "The Guitar"; //Name of the window

	namedWindow(windowName); // Create a window

	imshow(windowName, image); // Show our image inside the created window.

	waitKey(0); // Wait for any keystroke in the window

	//destroyWindow(windowName); //destroy the created window*/

	
	string imageName("C:/Users/msa/Desktop/programmig test/SIMexpt/1.tif"); // start with a default

																			// Open the TIFF file using libtiff
	TIFF* tif = TIFFOpen(imageName.c_str(), "r");

	// Create a matrix to hold the tif image in
	Mat image;

	if (tif) {
		do {
			unsigned int width, height;
			uint32* raster;

			// get the size of the tiff
			TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &width);
			TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &height);

			uint npixels = width*height; // get the total number of pixels

			raster = (uint32*)_TIFFmalloc(npixels * sizeof(uint32)); // allocate temp memory (must use the tiff library malloc)
			if (raster == NULL) // check the raster's memory was allocaed
			{
				TIFFClose(tif);
				cerr << "Could not allocate memory for raster of TIFF image" << endl;
				return -1;
			}

			// Check the tif read to the raster correctly
			if (!TIFFReadRGBAImage(tif, width, height, raster, 0))
			{
				TIFFClose(tif);
				cerr << "Could not read raster of TIFF image" << endl;
				return -1;
			}

			image = Mat(width, height, CV_8UC4); // create a new matrix of w x h with 8 bits per channel and 4 channels (RGBA)

												 // itterate through all the pixels of the tif
			for (uint x = 0; x < width; x++)
				for (uint y = 0; y < height; y++)
				{
					uint32& TiffPixel = raster[y*width + x]; // read the current pixel of the TIF
					Vec4b& pixel = image.at<Vec4b>(Point(y, x)); // read the current pixel of the matrix
					pixel[0] = TIFFGetB(TiffPixel); // Set the pixel values as BGRA
					pixel[1] = TIFFGetG(TiffPixel);
					pixel[2] = TIFFGetR(TiffPixel);
					pixel[3] = TIFFGetA(TiffPixel);
				}

			_TIFFfree(raster); // release temp memory
							   // Rotate the image 90 degrees couter clockwise
			image = image.t();
			flip(image, image, 0);
			imshow("TIF Image", image); // show the image
			waitKey(0); // wait for anykey before displaying next
		} while (TIFFReadDirectory(tif)); // get the next tif
		TIFFClose(tif); // close the tif file
	}

	return 0;
}
